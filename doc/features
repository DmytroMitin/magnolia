 - derives typeclasses for case classes, case objects and sealed traits
 - offers a lightweight, non-macro syntax for writing derivations
 - works with recursive and mutually-recursive definitions
 - supports parameterized ADTs (GADTs), including in recursive types
 - supports typeclasses whose generic type parameter is used in either
   covariant and contravariant positions
 - caches implicit searches for compile-time efficiency
 - prints an error stack to help debugging when derivation fails
 - provides access to case class default parameter values
 - offers predictable resolution of prioritized implicits
 - does not require additional type annotations, like `Lazy[T]`
